# create independent x-values
x =(-(sampleSize-1)/2):((sampleSize-1)/2) # Making the value of x from -15 to 15
# create dependent values according to ax + b + N(0,sd)
y=trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd) # Generates a vector of y values that deviate randomly from the above linear relationship between x and y
plot(x,y, main="Test Data") # shows these sample points on the plot.
likelihood <- function(param){ # Making the likelihood function of the following the three parameters.
a = param[1] # First  prameter as variable of the likelihood function
b = param[2] # Second prameter as variable of the likelihood function
sd = param[3] # Third prameter as variable of the likelihood function
pred = a*x + b # Define a vector "pred" as the exact y values for each x in the sample given the inital conditions in param
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T) # Define a vector of likelihood of the function given on the prediction as mean
sumll = sum(singlelikelihoods) # Sum of all of elements in singlelikelihoods vector.
return(sumll) # Return as the sum of singlelikelihoods vector as output of likelihood function
}
# Example: plot the likelihood profile of the slope a
# Defines a slopevalues() function which returns the result of a likelihood function with the argument as the slope "a" and trueB/trueSd being constant
#x in function(x) is not a vector! it is just a number. Slopevalues is a function.
slopevalues=function(x){return(likelihood(c(x, trueB, trueSd)))}
# Applies the slopevalues function for each "a" from 3 to 7 in intervals of 0.5 and stores each result as an element in the vector "slopelikelihoods"
#lappy is a command that applies slopevalues (this is a function) to all of the numbers in seq(3, 7, by=.05)
slopelikelihoods=lapply(seq(3, 7, by=.05), slopevalues )
plot (seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior distribution which is also a function needed in the Bayesian statistics
prior <- function(param){
a = param[1]??? # Defines the first element of the param vector as "a"
b = param[2]   # Defines the second element of the param vector as "b
sd = param[3]  # Defines the third element of the param vector as "sd"
aprior = dunif(a, min=0, max=10, log = T) # Define a "aprior" as a uniform distribution of "a" bounded from 0 to 10 on a log scale
bprior = dnorm(b, sd = 5, log = T) # Define a "bprior" as a normal distribution of "b" with a standard deviation of 5 on a log scale
sdprior = dunif(sd, min=0, max=30, log = T) # Defines a "sdprior" as a uniform distribution of "sd" bounded from 0 to 30 on a log scale
return(aprior+bprior+sdprior) # Return the sum of aprior, bprior and sdprior as the output of function
}
# Posterior distribution which is also a function needed in the Bayesian statistics.
# A function of returning addition of likehood and prior
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
chain = run_metropolis_MCMC(startvalue, 10000)
trueA <- 5 # Give the acutal value of true parameter A
trueB <- 0 # Give the acutal value of true parameter B
trueSd <- 10 # Give the acutal value of true paratter of Standard Deviation
sampleSize <- 31 # # Give the acutal value of sample size
# create independent x-values
x =(-(sampleSize-1)/2):((sampleSize-1)/2) # Making the value of x from -15 to 15
# create dependent values according to ax + b + N(0,sd)
y=trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd) # Generates a vector of y values that deviate randomly from the above linear relationship between x and y
plot(x,y, main="Test Data") # shows these sample points on the plot.
likelihood <- function(param){ # Making the likelihood function of the following the three parameters.
a = param[1] # First  prameter as variable of the likelihood function
b = param[2] # Second prameter as variable of the likelihood function
sd = param[3] # Third prameter as variable of the likelihood function
pred = a*x + b # Define a vector "pred" as the exact y values for each x in the sample given the inital conditions in param
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T) # Define a vector of likelihood of the function given on the prediction as mean
sumll = sum(singlelikelihoods) # Sum of all of elements in singlelikelihoods vector.
return(sumll) # Return as the sum of singlelikelihoods vector as output of likelihood function
}
# Example: plot the likelihood profile of the slope a
# Defines a slopevalues() function which returns the result of a likelihood function with the argument as the slope "a" and trueB/trueSd being constant
#x in function(x) is not a vector! it is just a number. Slopevalues is a function.
slopevalues=function(x){return(likelihood(c(x, trueB, trueSd)))}
# Applies the slopevalues function for each "a" from 3 to 7 in intervals of 0.5 and stores each result as an element in the vector "slopelikelihoods"
#lappy is a command that applies slopevalues (this is a function) to all of the numbers in seq(3, 7, by=.05)
slopelikelihoods=lapply(seq(3, 7, by=.05), slopevalues )
plot (seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior distribution which is also a function needed in the Bayesian statistics
prior <- function(param){
a = param[1]??? # Defines the first element of the param vector as "a"
b = param[2]   # Defines the second element of the param vector as "b
sd = param[3]  # Defines the third element of the param vector as "sd"
aprior = dunif(a, min=0, max=10, log = T) # Define a "aprior" as a uniform distribution of "a" bounded from 0 to 10 on a log scale
bprior = dnorm(b, sd = 5, log = T) # Define a "bprior" as a normal distribution of "b" with a standard deviation of 5 on a log scale
sdprior = dunif(sd, min=0, max=30, log = T) # Defines a "sdprior" as a uniform distribution of "sd" bounded from 0 to 30 on a log scale
return(aprior+bprior+sdprior) # Return the sum of aprior, bprior and sdprior as the output of function
}
# Posterior distribution which is also a function needed in the Bayesian statistics.
# A function of returning addition of likehood and prior
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
chain = run_metropolis_MCMC(startvalue, 10000)
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
chain = run_metropolis_MCMC(startvalue, 10000)
trueA <- 5 # Give the acutal value of true parameter A
trueB <- 0 # Give the acutal value of true parameter B
trueSd <- 10 # Give the acutal value of true paratter of Standard Deviation
sampleSize <- 31 # # Give the acutal value of sample size
# create independent x-values
x =(-(sampleSize-1)/2):((sampleSize-1)/2) # Making the value of x from -15 to 15
# create dependent values according to ax + b + N(0,sd)
y=trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd) # Generates a vector of y values that deviate randomly from the above linear relationship between x and y
plot(x,y, main="Test Data") # shows these sample points on the plot.
likelihood <- function(param){ # Making the likelihood function of the following the three parameters.
a = param[1] # First  prameter as variable of the likelihood function
b = param[2] # Second prameter as variable of the likelihood function
sd = param[3] # Third prameter as variable of the likelihood function
pred = a*x + b # Define a vector "pred" as the exact y values for each x in the sample given the inital conditions in param
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T) # Define a vector of likelihood of the function given on the prediction as mean
sumll = sum(singlelikelihoods) # Sum of all of elements in singlelikelihoods vector.
return(sumll) # Return as the sum of singlelikelihoods vector as output of likelihood function
}
# Example: plot the likelihood profile of the slope a
# Defines a slopevalues() function which returns the result of a likelihood function with the argument as the slope "a" and trueB/trueSd being constant
#x in function(x) is not a vector! it is just a number. Slopevalues is a function.
slopevalues=function(x){return(likelihood(c(x, trueB, trueSd)))}
# Applies the slopevalues function for each "a" from 3 to 7 in intervals of 0.5 and stores each result as an element in the vector "slopelikelihoods"
#lappy is a command that applies slopevalues (this is a function) to all of the numbers in seq(3, 7, by=.05)
slopelikelihoods=lapply(seq(3, 7, by=.05), slopevalues )
plot (seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior distribution which is also a function needed in the Bayesian statistics
prior <- function(param){
a = param[1]??? # Defines the first element of the param vector as "a"
b = param[2]   # Defines the second element of the param vector as "b
sd = param[3]  # Defines the third element of the param vector as "sd"
aprior = dunif(a, min=0, max=10, log = T) # Define a "aprior" as a uniform distribution of "a" bounded from 0 to 10 on a log scale
bprior = dnorm(b, sd = 5, log = T) # Define a "bprior" as a normal distribution of "b" with a standard deviation of 5 on a log scale
sdprior = dunif(sd, min=0, max=30, log = T) # Defines a "sdprior" as a uniform distribution of "sd" bounded from 0 to 30 on a log scale
return(aprior+bprior+sdprior) # Return the sum of aprior, bprior and sdprior as the output of function
}
# Posterior distribution which is also a function needed in the Bayesian statistics.
# A function of returning addition of likehood and prior
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
chain = run_metropolis_MCMC(startvalue, 10000)
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
# Sets variable burnIn to 5000--future lines of code exclude elements of chain from 1:burnIn. This #is early iterations of the MCMC function are more biased than later ones
burnIn = 5000
chain = run_metropolis_MCMC(startvalue, 10000)
trueA <- 5 # Give the acutal value of true parameter A
trueB <- 0 # Give the acutal value of true parameter B
trueSd <- 10 # Give the acutal value of true paratter of Standard Deviation
sampleSize <- 31 # # Give the acutal value of sample size
# create independent x-values
x =(-(sampleSize-1)/2):((sampleSize-1)/2) # Making the value of x from -15 to 15
# create dependent values according to ax + b + N(0,sd)
y=trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd) # Generates a vector of y values that deviate randomly from the above linear relationship between x and y
plot(x,y, main="Test Data") # shows these sample points on the plot.
likelihood <- function(param){ # Making the likelihood function of the following the three parameters.
a = param[1] # First  prameter as variable of the likelihood function
b = param[2] # Second prameter as variable of the likelihood function
sd = param[3] # Third prameter as variable of the likelihood function
pred = a*x + b # Define a vector "pred" as the exact y values for each x in the sample given the inital conditions in param
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T) # Define a vector of likelihood of the function given on the prediction as mean
sumll = sum(singlelikelihoods) # Sum of all of elements in singlelikelihoods vector.
return(sumll) # Return as the sum of singlelikelihoods vector as output of likelihood function
}
# Example: plot the likelihood profile of the slope a
# Defines a slopevalues() function which returns the result of a likelihood function with the argument as the slope "a" and trueB/trueSd being constant
#x in function(x) is not a vector! it is just a number. Slopevalues is a function.
slopevalues=function(x){return(likelihood(c(x, trueB, trueSd)))}
# Applies the slopevalues function for each "a" from 3 to 7 in intervals of 0.5 and stores each result as an element in the vector "slopelikelihoods"
#lappy is a command that applies slopevalues (this is a function) to all of the numbers in seq(3, 7, by=.05)
slopelikelihoods=lapply(seq(3, 7, by=.05), slopevalues )
plot (seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior distribution which is also a function needed in the Bayesian statistics
prior <- function(param){
a = param[1]??? # Defines the first element of the param vector as "a"
b = param[2]   # Defines the second element of the param vector as "b
sd = param[3]  # Defines the third element of the param vector as "sd"
aprior = dunif(a, min=0, max=10, log = T) # Define a "aprior" as a uniform distribution of "a" bounded from 0 to 10 on a log scale
bprior = dnorm(b, sd = 5, log = T) # Define a "bprior" as a normal distribution of "b" with a standard deviation of 5 on a log scale
sdprior = dunif(sd, min=0, max=30, log = T) # Defines a "sdprior" as a uniform distribution of "sd" bounded from 0 to 30 on a log scale
return(aprior+bprior+sdprior) # Return the sum of aprior, bprior and sdprior as the output of function
}
# Posterior distribution which is also a function needed in the Bayesian statistics.
# A function of returning addition of likehood and prior
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
# Sets variable burnIn to 5000--future lines of code exclude elements of chain from 1:burnIn. This #is early iterations of the MCMC function are more biased than later ones
burnIn = 5000
chain = run_metropolis_MCMC (startvalue, 10000)
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
# Sets variable burnIn to 5000--future lines of code exclude elements of chain from 1:burnIn. This #is early iterations of the MCMC function are more biased than later ones
burnIn = 5000
chain = run_metropolis_MCMC (startvalue, 10000)
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
# Sets variable burnIn to 5000--future lines of code exclude elements of chain from 1:burnIn. This #is early iterations of the MCMC function are more biased than later ones
burnIn = 5000
chain = run_metropolis_MCMC (startvalue, 10000)
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
# Sets variable burnIn to 5000--future lines of code exclude elements of chain from 1:burnIn. This #is early iterations of the MCMC function are more biased than later ones
burnIn = 5000
chain = run_metropolis_MCMC(startvalue, 10000)
######## Metropolis algorithm ################
# Defines the function proposalfunction(param), which returns a random number from a normal #distribution with mean = parameter and given sd for each element of the param vector
# "3" is the number of outputs of random number from normal distribution.
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
# Define the MCMC function whose arguments are starting inputs from the startvalue vector for each parameter and the number of iterations of the function to run
run_metropolis_MCMC <- function(startvalue, iterations){
# Define an empty "chain" matrix with (iterations + 1) columns and three rows (one for each parameter)
chain = array(dim = c(iterations+1,3))
# Put the elements in startvalue as the first column of the chain matrix
chain[1,] = startvalue
# Repeat the following for the number of iterations
for (i in 1:iterations){
# Define a proposal vector by the proposalfunction(), which generates three random numbers from normal distributions around the ith elements in chain
proposal = proposalfunction(chain[i,])
# Defines a vector "probab" applying the posterior function to compute the ratio of probabilites of the proposed parameter value and the ith element in chain
probab = exp(posterior(proposal) - posterior(chain[i,]))
# If probab is larger than a random number between 0 and 1.
if (runif(1) < probab){
# the proposed value becomes the next entry in that row of the chain matrix
chain[i+1,] = proposal
}else{
# the next entry in the row of the chain matrix is the same as the previous one.
chain[i+1,] = chain[i,]
}
}
# Return chain after all iterations--this is the Markov chain that shows values in the probability distribution of each parameter
return(chain)
}
# Defines the starting values for each parameter for the function
startvalue = c(4,0,10)
# Runs the MCMC function with startvalue as the initial conditions and with 10,000 iterations
# Sets variable burnIn to 5000--future lines of code exclude elements of chain from 1:burnIn. This #is early iterations of the MCMC function are more biased than later ones
burnIn = 5000
chain = run_metropolis_MCMC (startvalue, 10000)
